---
- hosts: all
  # Workaround for apt-get bug
  # https://bugs.launchpad.net/ubuntu/+source/ansible/+bug/1833013
  # https://github.com/hashicorp/vagrant/issues/10914
  environment:
    DEBIAN_FRONTEND: "noninteractive"

  vars_files:
    - vars/itrev.secrets.yml

  become: true

  vars:
    # database_name: "slack_archiver_datomic"
    # database_user: "slack_archiver"
    # database_hostname: "localhost"
    # database_port: 5432
    cert_dir: "/etc/ssl/ansible"
    slack_archiver_app_fqdn: "slack-archiver.clojureverse.org" # TODO: set right domain
    slack_archiver_app_challenge_fqdn: "{{ slack_archiver_app_fqdn | regex_search('(^[^\\.]+)') }}.acmechallenges.clojureverse.org" # TODO correct domain
    slack_archiver_app_http_port: 4242
    datomic_pro_version: 0.9.5561.56
    datomic_object_cache_max: 1g
    datomic_transactor_max_heap: 1782m
    clojure_socket_repl_port: 50505
    clojure_app_env_vars: |
      JVM_OPTS="-Dclojure.server.myrepl={:port,{{ clojure_socket_repl_port }},:accept,clojure.core.server/repl} -Xmx1782m -Xms1g -Ddatomic.ObjectCacheMax=1g -Ddatomic.memcachedServers=127.0.0.1:11211"
    # -Dcom.sun.management.jmxremote.port=17264 -Dcom.sun.management.jmxremote.rmi.port=17264

  tasks:
    # - name: Set up librato first so we have eyes
    #   import_role:
    #     name: librato.librato
    #   vars:
    #     librato_enabled_plugins: ['nginx', 'memcached'] #jvm, postgresql
    #     librato_logging_use_syslog: true

    # Keys first, then repos, then the dist-upgrade.
    - name: Add repository for ansible
      tags: initial_setup
      apt_repository:
        repo: ppa:ansible/ansible
        state: present

    # 16.04 LTS xenial ships with 3.5, which is too old for rtmbot
    - name: Add repository for python3.6
      tags: initial_setup
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'xenial'
      apt_repository:
        repo: ppa:deadsnakes/ppa
        state: present

    - name: Install python3.6 on xenial
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'xenial'
      tags: initial_setup
      apt:
        name: python3.6
        state: latest
        update_cache: yes

    - name: Install python3 elsewhere
      when: ansible_distribution != 'Ubuntu' or ansible_distribution_release != 'xenial'
      tags: initial_setup
      apt:
        name: python3
        state: latest
        update_cache: yes

    - name: Install the lastest versions of listed packages
      tags: initial_setup
      apt:
        name: "{{ item }}"
        state: latest
        update_cache: yes
      loop:
        - ansible
        - curl
        - emacs
        - git
        - htop                  # To view processes
        - openjdk-8-jdk         # For Clojure
        - python3-pip
        - python3-apt
        - rlwrap                # For clj
        - screen
        - unzip                 # for ansible unarchive module

    - name: Purge installed apps
      tags: initial_setup
      apt:
        name: "{{ item }}"
        state: absent
        purge: yes
      loop:
        - ubuntu-web-launchers  # to remove Amazon icon from launcher

    - name: Do a dist-upgrade
      tags: initial_setup
      apt:
        upgrade: dist
        update_cache: yes

    # Clean up
    - name: Remove unneeded apt stuff
      tags: initial_setup
      apt:
        autoremove: yes

    # Unfortunately, the apt version of lein is quite old.
    - name: Set up Leiningen
      tags: leiningen
      import_role:
        name: leiningen

    # Too bad we cannot use the alternatives module
    # as it would require listing each java command.
    - name: Check if jdk8 is default
      tags: jdk
      command: update-alternatives --display java
      register: chkjava
      changed_when: false
      check_mode: false

    - name: Choose jdk8 as default for Clojure
      tags: jdk
      command: update-java-alternatives --set java-1.8.0-openjdk-amd64
      when: chkjava.stdout.find('link currently points to /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java') == -1

    # Firewall settings  # TODO: check if GCP tooling requires any other ports
    - name: Set firewall settings to allow ssh, http/s
      tags: firewall
      import_role:
        name: firewall

    # Now install the programs
    - name: Install memcached
      import_role:
        name: geerlingguy.memcached
      tags: memcached
      vars:
        memcached_memory_limit: 4096

    # - name: Install postgres
    #   import_role:
    #     name: geerlingguy.postgresql
    #   tags: postgres
    #   vars:
    #     postgresql_databases:
    #       - name: "{{ database_name }}"
    #     postgresql_users:
    #       - name: "{{ database_user }}"
    #         password: "{{ database_password }}"
    #         db: "{{ database_name }}"
    #         priv: "ALL"

    # - name: Install datomic-pro
    #   import_role:
    #     name: plexus.datomic-pro
    #   tags: datomic
    #   vars:
    #     datomic_memcached: 127.0.0.1:11211

    # Now the Clojurians Log app stuff
    - name: Install the Clojure Web app
      import_role:
        name: plexus.clojure-web-app
      tags: clojure-web-app
      vars:
        clojure_app_authorized_keys: "" # TODO: these are the keys that can push new versions of the app
        clojure_app_main_command: "/usr/local/bin/lein with-profile +production,-dev run {{ clojure_app_home_dir }}/config.edn"
        clojure_app_health_check_url: "http://localhost:{{slack_archiver_app_http_port}}/x/x/x/healthcheck"
        clojure_app_service_start_after: datomic.service

    - name: Setup and config rtmbot
      tags: rtmbot
      import_role:
        name: plexus.rtmbot
      vars:
        rtmbot_user: "{{ clojure_app_user }}"
        rtmbot_group: "{{ clojure_app_user }}"

    - name: Install and configure the slack-archiver-app
      tags: slack-archiver
      import_role:
        name: plexus.slack-archiver

    # TODO: re-enable the Let's encrypt / ACME stuff when we have DNS sorted

    # Generates dhparam.pem
    - name: Prepare for ACME installs
      tags: setup-acme
      import_role:
        name: setup_acme

    - name: Ensure gcloud is installed for use in ACME DNS-01 challenge.
      tags: gcloud
      import_role:
        name: setup_gcloud

    # LetsEncrypt   # TODO: re-enable when we have the right fqdn
    # - name: Generate and install a LetsEncrypt SSL Cert.
    #   tags: acme
    #   import_role:
    #     name: nickjj.acme_sh
    #   vars:
    #     acme_sh_git_update: False
    #     acme_sh_git_clone_dest: "/usr/local/src/acme.sh"
    #     acme_sh_upgrade: False
    #     acme_sh_account_email: "arne@arnebrasseur.net" # TODO: use different email?
    #     acme_sh_copy_certs_to_path: "{{ cert_dir }}"
    #     acme_sh_list_domains: True
    #     acme_sh_default_staging: False
    #     acme_sh_default_force_issue: False # Set to True initially, once
    #     acme_sh_default_dns_provider: "dns_gcloud"
    #     acme_sh_default_dns_provider_api_keys: { "FOO": "BAR" } # Cannot be empty
    #     acme_sh_domains:
    #       - domains: ["{{ slack_archiver_app_fqdn }}"]
    #         extra_flags_issue: "--challenge-alias {{ slack_archiver_app_challenge_fqdn }}"
    #         extra_flags_renew: "--challenge-alias {{ slack_archiver_app_challenge_fqdn }}"

    # NGINX        # TODO: enable nginx again when we know dns/ssl situation

    # TODO: See also https://michael.lustfield.net/nginx/getting-a-perfect-ssl-labs-score
    # TODO: See also https://gist.github.com/nrollr/9a39bb636a820fb97eec2ed85e473d38
    # - name: Install and configure nginx for SSL
    #   tags: nginx
    #   import_role:
    #     name: geerlingguy.nginx
    #   vars:
    #     nginx_remove_default_vhost: true
    #     nginx_proxy_cache_path: "/var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=20g inactive=365d use_temp_path=off"
    #     nginx_extra_http_options: |
    #       proxy_buffering    off;
    #       proxy_set_header   X-Real-IP $remote_addr;
    #       proxy_set_header   X-Scheme $scheme;
    #       proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    #       proxy_set_header   Host $http_host;
    #     nginx_vhosts:
    #       - listen: 80
    #         server_name: "localhost {{ slack_archiver_app_fqdn }}"
    #         state: "present"
    #         return: "301 https://{{ slack_archiver_app_fqdn }}$request_uri"
    #       - listen: "443 ssl http2"
    #         server_name: "localhostssl {{ slack_archiver_app_fqdn }}"
    #         state: "present"
    #         nginx_access_log: off
    #         extra_parameters: |
    #           location = /basic_status {
    #                 stub_status;
    #           }
    #           location / {
    #               root {{ clojure_app_app_dir }}/resources/public;
    #               try_files $uri @proxy_app;
    #               expires max;
    #               if ($request_filename ~ "^.*/([^/]+\.(zip|tgz|iso|gz|vcf))$"){
    #                 set $fname $1;
    #                 add_header Content-Disposition 'attachment; filename="$fname"';
    #               }

    #           }
    #           ssl_certificate             {{ cert_dir }}/{{ slack_archiver_app_fqdn }}.pem;
    #           ssl_certificate_key         {{ cert_dir }}/{{ slack_archiver_app_fqdn }}.key;
    #           ssl on;
    #           # enable session resumption to improve https performance
    #           # http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
    #           ssl_session_cache shared:SSL:50m;
    #           ssl_session_timeout 5m;
    #           # enables server-side protection from BEAST attacks
    #           # http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
    #           ssl_prefer_server_ciphers on;
    #           # disable SSLv3 (enabled by default since nginx 0.8.19) since it's less secure than TLS
    #           # http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
    #           ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    #           # ciphers chosen for forward secrecy and compatibility
    #           # http://blog.ivanristic.com/2013/08/configuring-apache-nginx-and-openssl-for-forward-secrecy.html
    #           ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
    #           # enable ocsp stapling (mechanism by which a site can convey certificate revocation information
    #           # to visitors in a privacy-preserving, scalable manner)
    #           # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
    #           resolver 8.8.8.8;
    #           ssl_stapling on;
    #           # ssl_session_cache builtin:1000  shared:SSL:10m;
    #           ssl_dhparam {{ cert_dir }}/dhparam.pem;
    #           add_header Strict-Transport-Security 'max-age=31536000';
    #           location @proxy_app {
    #               proxy_cache my_cache;
    #               proxy_cache_revalidate on;
    #               proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    #               proxy_cache_background_update on;
    #               proxy_cache_lock on;
    #               proxy_cache_valid 200 365d;
    #               proxy_buffering on;
    #               add_header X-Cache-Status $upstream_cache_status;

    #               proxy_pass http://localhost:{{ slack_archiver_app_http_port }};
    #               proxy_read_timeout 90;
    #               proxy_redirect http://localhost:{{ slack_archiver_app_http_port }} https://{{ slack_archiver_app_fqdn }};
    #               proxy_set_header Host $host;
    #               proxy_set_header X-Real-IP $remote_addr;
    #               proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #               proxy_set_header X-Forwarded-Proto $scheme;
    #           }
